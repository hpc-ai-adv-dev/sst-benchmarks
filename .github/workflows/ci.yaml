name: CI

on:
  pull_request:

jobs:
  # Build jobs - create libraries once and share as artifacts
  build_gameoflife_v15:
    runs-on: ubuntu-latest
    container:
      image: arezaiihpe/sst-core:15.0.0

    steps:
    - uses: actions/checkout@v4

    - name: Build gameoflife library
      run: |
        cd gameoflife
        make

    - name: Upload gameoflife library
      uses: actions/upload-artifact@v4
      with:
        name: gameoflife-lib-v15
        path: gameoflife/libgol.so
        retention-days: 1

  build_pingpong_v15:
    runs-on: ubuntu-latest
    container:
      image: arezaiihpe/sst-core:15.0.0

    steps:
    - uses: actions/checkout@v4

    - name: Build pingpong library
      run: |
        cd pingpong
        make

    - name: Upload pingpong library
      uses: actions/upload-artifact@v4
      with:
        name: pingpong-lib-v15
        path: pingpong/libpingpong.so
        retention-days: 1

  build_phold_v15:
    runs-on: ubuntu-latest
    container:
      image: arezaiihpe/sst-core:15.0.0

    steps:
    - uses: actions/checkout@v4

    - name: Build PHOLD library
      run: |
        cd phold
        make

    - name: Upload PHOLD library
      uses: actions/upload-artifact@v4
      with:
        name: phold-lib-v15
        path: phold/libphold.so
        retention-days: 1

  # Test jobs - use pre-built libraries
  gameoflife_test_v15:
    runs-on: ubuntu-latest
    needs: build_gameoflife_v15
    container:
      image: arezaiihpe/sst-core:15.0.0

    steps:
    - uses: actions/checkout@v4

    - name: Download gameoflife library
      uses: actions/download-artifact@v4
      with:
        name: gameoflife-lib-v15
        path: gameoflife/

    - name: Run gameoflife test
      run: |
        cd gameoflife
        sst-register gol gol_LIBDIR=$(pwd)
        sst gol.py -- --verbose --seed 42 > gol_sim.out
        diff ../.github/workflows/gol.good ./gol_sim.out

  pingpong_test_v15:
    runs-on: ubuntu-latest
    needs: build_pingpong_v15
    container:
      image: arezaiihpe/sst-core:15.0.0

    steps:
    - uses: actions/checkout@v4

    - name: Download pingpong library
      uses: actions/download-artifact@v4
      with:
        name: pingpong-lib-v15
        path: pingpong/

    - name: Run pingpong test
      run: |
        cd pingpong
        sst-register pingpong pingpong_LIBDIR=$(pwd)
        sst pingpong.py -- --corners --verbose > pingpong_sim.out
        diff ../.github/workflows/pingpong.good ./pingpong_sim.out

  phold_test_v15:
    runs-on: ubuntu-latest
    needs: build_phold_v15
    container:
      image: arezaiihpe/sst-core:15.0.0

    steps:
    - uses: actions/checkout@v4

    - name: Download PHOLD library
      uses: actions/download-artifact@v4
      with:
        name: phold-lib-v15
        path: phold/

    - name: Run PHOLD test
      run: |
        cd phold
        sst-register phold phold_LIBDIR=$(pwd)
        sst phold_dist.py -- --verbose 1 > phold_sim.out 2>&1
        diff ../.github/workflows/phold.good ./phold_sim.out

  # Checkpoint testing jobs for Game of Life
  gameoflife_checkpoint_v15:
    runs-on: ubuntu-latest
    needs: build_gameoflife_v15
    container:
      image: arezaiihpe/sst-core:15.0.0

    steps:
    - uses: actions/checkout@v4

    - name: Download gameoflife library
      uses: actions/download-artifact@v4
      with:
        name: gameoflife-lib-v15
        path: gameoflife/

    - name: Run with checkpoint enabled
      run: |
        cd gameoflife
        sst-register gol gol_LIBDIR=$(pwd)
        sst --checkpoint-sim-period=1.5s gol.py -- --verbose --seed 42 2>&1 | grep -v "Real CPU time" > gol_checkpoint.out
        diff ../.github/workflows/gol_checkpoint.good ./gol_checkpoint.out
        # Verify checkpoint files were created
        ls -la checkpoint_*/ || echo "No checkpoint directory found"

    - name: Upload checkpoint artifacts
      uses: actions/upload-artifact@v4
      with:
        name: gameoflife-checkpoint-v15
        path: gameoflife/checkpoint/
        retention-days: 1

  gameoflife_restore_v15:
    runs-on: ubuntu-latest
    needs: gameoflife_checkpoint_v15
    container:
      image: arezaiihpe/sst-core:15.0.0

    steps:
    - uses: actions/checkout@v4

    - name: Download gameoflife library
      uses: actions/download-artifact@v4
      with:
        name: gameoflife-lib-v15
        path: gameoflife/

    - name: Download checkpoint artifacts
      uses: actions/download-artifact@v4
      with:
        name: gameoflife-checkpoint-v15
        path: gameoflife/checkpoint/

    - name: Restore from checkpoint
      run: |
        cd gameoflife
        sst-register gol gol_LIBDIR=$(pwd)
        # Find the earliest checkpoint directory
        CHECKPOINT_FILE=$(find checkpoint -name "*.sstcpt" | sort | head -1)
        echo "Restoring from: $CHECKPOINT_FILE"
        sst --load-checkpoint "$CHECKPOINT_FILE" > gol_restore.out 2>&1
        diff ../.github/workflows/gol_restore.good ./gol_restore.out
        # Verify simulation completed
        grep -q "Simulation is complete" gol_restore.out

  # Checkpoint testing jobs for Pingpong
  pingpong_checkpoint_v15:
    runs-on: ubuntu-latest
    needs: build_pingpong_v15
    container:
      image: arezaiihpe/sst-core:15.0.0

    steps:
    - uses: actions/checkout@v4

    - name: Download pingpong library
      uses: actions/download-artifact@v4
      with:
        name: pingpong-lib-v15
        path: pingpong/

    - name: Run with checkpoint enabled
      run: |
        cd pingpong
        sst-register pingpong pingpong_LIBDIR=$(pwd)
        sst --checkpoint-sim-period=50ps pingpong.py -- --corners --verbose 2>&1 | grep -v "Real CPU time" > pingpong_checkpoint.out
        diff ../.github/workflows/pingpong_checkpoint.good ./pingpong_checkpoint.out
        # Verify checkpoint files were created
        ls -la checkpoint_*/ || echo "No checkpoint directory found"

    - name: Upload checkpoint artifacts
      uses: actions/upload-artifact@v4
      with:
        name: pingpong-checkpoint-v15
        path: pingpong/checkpoint/
        retention-days: 1

  pingpong_restore_v15:
    runs-on: ubuntu-latest
    needs: pingpong_checkpoint_v15
    container:
      image: arezaiihpe/sst-core:15.0.0

    steps:
    - uses: actions/checkout@v4

    - name: Download pingpong library
      uses: actions/download-artifact@v4
      with:
        name: pingpong-lib-v15
        path: pingpong/

    - name: Download checkpoint artifacts
      uses: actions/download-artifact@v4
      with:
        name: pingpong-checkpoint-v15
        path: pingpong/checkpoint/

    - name: Restore from checkpoint
      run: |
        cd pingpong
        sst-register pingpong pingpong_LIBDIR=$(pwd)
        # Find the earliest checkpoint directory
        CHECKPOINT_FILE=$(find checkpoint -name "*.sstcpt" | sort | head -1)
        echo "Restoring from: $CHECKPOINT_FILE"
        sst --load-checkpoint "$CHECKPOINT_FILE" > pingpong_restore.out 2>&1
        diff ../.github/workflows/pingpong_restore.good ./pingpong_restore.out
        # Verify simulation completed
        grep -q "Simulation is complete" pingpong_restore.out

  # Checkpoint testing jobs for PHOLD
  phold_checkpoint_v15:
    runs-on: ubuntu-latest
    needs: build_phold_v15
    container:
      image: arezaiihpe/sst-core:15.0.0

    steps:
    - uses: actions/checkout@v4

    - name: Download PHOLD library
      uses: actions/download-artifact@v4
      with:
        name: phold-lib-v15
        path: phold/

    - name: Run with checkpoint enabled
      run: |
        cd phold
        sst-register phold phold_LIBDIR=$(pwd)
        sst --checkpoint-sim-period=250ns phold_dist.py -- --verbose 1 2>&1 | grep -v "Real CPU time" > phold_checkpoint.out
        diff ../.github/workflows/phold_checkpoint.good ./phold_checkpoint.out
        # Verify checkpoint files were created
        ls -la checkpoint_*/ || echo "No checkpoint directory found"

    - name: Upload checkpoint artifacts
      uses: actions/upload-artifact@v4
      with:
        name: phold-checkpoint-v15
        path: phold/checkpoint/
        retention-days: 1

  phold_restore_v15:
    runs-on: ubuntu-latest
    needs: phold_checkpoint_v15
    container:
      image: arezaiihpe/sst-core:15.0.0

    steps:
    - uses: actions/checkout@v4

    - name: Download PHOLD library
      uses: actions/download-artifact@v4
      with:
        name: phold-lib-v15
        path: phold/

    - name: Download checkpoint artifacts
      uses: actions/download-artifact@v4
      with:
        name: phold-checkpoint-v15
        path: phold/checkpoint/

    - name: Restore from checkpoint
      run: |
        cd phold
        sst-register phold phold_LIBDIR=$(pwd)
        # Find the earliest checkpoint directory
        CHECKPOINT_FILE=$(find checkpoint -name "*.sstcpt" | sort | head -1)
        echo "Restoring from: $CHECKPOINT_FILE"
        sst --load-checkpoint "$CHECKPOINT_FILE" > phold_restore.out 2>&1
        diff ../.github/workflows/phold_restore.good ./phold_restore.out
        # Verify simulation completed
        grep -q "Simulation is complete" phold_restore.out

